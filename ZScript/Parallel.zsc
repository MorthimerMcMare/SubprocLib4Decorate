//

enum EParallelExecDirectives {
	PARSPR_All = 0,		// Apply all sprites.
	PARSPR_SkipTNT1,	// Apply all sprites exculding TNT1A0.
	PARSPR_None,		// Do not apply sprites, use codepointers only.

	PARSPR_Any			= PARSPR_All,
	PARSPR_SkipTNT1A0	= PARSPR_SkipTNT1,
	PARSPR_IgnoreTNT1	= PARSPR_SkipTNT1,
	PARSPR_IgnoreTNT1A0	= PARSPR_SkipTNT1,
	PARSPR_IgnoreAll	= PARSPR_None,
	PARSPR_SkipAll		= PARSPR_None,

	PARSPR_Mask = 0x000F,

	PAREXEC_NoFunctionsCall = 0x0010
}

const PARSTEPS_Infinite = -1;


class SubproclibParallelExecNode play {
	SubproclibParallelExecKeeper keeper;
	Actor master;
	bool frozen;

	State parstate, cmpstate, startstate;
	int curtics;
	int stepsleft;

	EParallelExecDirectives spritesCopyingMode;
	bool noFunctionsCallFlag;
	bool firstStateTicked;

	private SpriteID spriteTNT1A0;

	static SubproclibParallelExecNode Create( SubproclibParallelExecKeeper initkeeper, State initstate, int initsteps, EParallelExecDirectives initparams ) {
		SubproclibParallelExecNode newthread = new( "SubproclibParallelExecNode" );
		newthread.keeper = initkeeper;
		newthread.master = initkeeper.owner;

		newthread.spritesCopyingMode = initparams & PARSPR_Mask;
		newthread.noFunctionsCallFlag = !!( initparams & PAREXEC_NoFunctionsCall );
		newthread.firstStateTicked = false;
		newthread.spriteTNT1A0 = Actor.GetSpriteIndex( "TNT1A0" );

		newthread.parstate = newthread.startstate = newthread.cmpstate = initstate;
		newthread.stepsleft = ( initsteps == 0? -1 : initsteps );
		newthread.curtics = ( initstate.Tics < 1? initstate.Tics : initstate.Tics + 1 );

		return newthread;
	}

	void ParTick() {
		if ( !master ) {
			Destroy();
			return;
		}

		// 1) Save previous master state data;
		// 2) Apply parallel state sequence;
		// 3) Save new parallel state data;
		// 4) Rollback master changes.

		if ( curtics != -1 && ( --curtics <= 0 ) ) {
			if ( stepsleft > 0 && --stepsleft == 0 ) {
				Destroy();
				return;
			}

			// Saving current main stateflow data:
			State prevMasterState = master.curstate;
			SpriteID prevMasterSprite = master.Sprite;
			int prevMasterFrame = master.Frame;
			int prevMasterTics = master.tics;

			//console.printf( GetClassName() .. "::ParTick(). Prev: state " .. prevMasterState .. ", sprite " .. prevMasterSprite .. ", frame %c, tics " .. prevMasterTics, prevMasterFrame + 65 );

			cmpstate = parstate;

			// Special handling of the start (first) state:
			if ( firstStateTicked )
				parstate = parstate.NextState;
			else
				firstStateTicked = true;


			if ( master.SetState( parstate, noFunctionsCallFlag ) ) {
				// Updating the parallel thread data:
				parstate = master.curstate;
				SpriteID newMasterSprite = master.Sprite;
				curtics = parstate.Tics;

				master.SetState( prevMasterState, true /* By default: "bool nofunction = false" */ );

				if ( spritesCopyingMode == PARSPR_None || ( spritesCopyingMode == PARSPR_SkipTNT1A0 && newMasterSprite == spriteTNT1A0 ) ) {
					// Sprite and frame may be changed via codepointers.
					master.Sprite = prevMasterSprite;
					master.Frame = prevMasterFrame;
				} else {
					master.Sprite = parstate.Sprite;
					master.Frame = parstate.Frame;
				}

				master.tics = prevMasterTics;
			} else {
				Destroy();
			}
		} // of if ( curtics != -1 && ( --curtics <= 0 ) ) {}

	} // of void ParTick() {}

	private String State2Str( State st ) {
		return SubproclibGeneral.State2String( st );
	}

	// Returns "true" if state is in the thread closer sequence.
	bool IsStateDescribesThread( State teststate ) {
		bool isInStateSeq = false;
		//String debugstr = "Remove states traceroute (cmp " .. State2Str( cmpstate ) .. "): ";

		if ( cmpstate == teststate ) {
			isInStateSeq = true;
			//debugstr.AppendFormat( "state %s itself.", State2Str( nextst ) );

		} else {
			State nextst = cmpstate;

			do {
				//debugstr.AppendFormat( "%s; ", State2Str( nextst ) );

				if ( nextst == teststate ) {
					isInStateSeq = true;
					break;
				}

				nextst = nextst.NextState;
			} while ( nextst && nextst.Tics == 0 );

			if ( nextst == teststate ) {
				//debugstr.AppendFormat( "%s; ", State2Str( nextst ) );
				isInStateSeq = true;
			}
		}

		//console.printf( "%s%s", debugstr, ( isInStateSeq? " --> is in state seq" : "" ) );

		return isInStateSeq;
	} // of bool IsStateDescribesThread( State teststate ) {}

} // of class SubproclibParallelExecNode play {}

class SubproclibParallelExecKeeper: Inventory {
	Array<SubproclibParallelExecNode> threads;

	static SubproclibParallelExecKeeper GetKeeper( Actor keepermaster ) {
		SubproclibParallelExecKeeper newkeeper = SubproclibParallelExecKeeper( keepermaster.FindInventory( "SubproclibParallelExecKeeper" ) );

		if ( !newkeeper )
			newkeeper = SubproclibParallelExecKeeper( keepermaster.GiveInventoryType( "SubproclibParallelExecKeeper" ) );

		return newkeeper;
	}

	static void RemoveKeeper( Actor keepermaster ) {
		Inventory oldkeeper = keepermaster.FindInventory( "SubproclibParallelExecKeeper" );

		if ( oldkeeper )
			oldkeeper.Destroy();
	}

	SubproclibParallelExecNode AddThread( StateLabel label, int steps = PARSTEPS_Infinite, EParallelExecDirectives initparams = PARSPR_SkipTNT1A0 ) {
		State stparallel = owner.ResolveState( label );
		SubproclibParallelExecNode newthread = NULL;

		if ( stparallel ) {
			//console.printf( "Adding thread %i.", threads.Size() );

			newthread = SubproclibParallelExecNode.Create( self, stparallel, steps, initparams );
			threads.Push( newthread );
		} else {
			SubproclibGeneral.StateMessage( owner, GetClassName() .. "::AddThread()", "Cannot resolve a StateLabel" );
		}

		return newthread;
	} // of SubproclibParallelExecNode AddThread( StateLabel label, EParallelExecDirectives initparams = PARSPR_SkipTNT1A0 ) {}

	int FindThreadByLabel( StateLabel label ) {
		int foundindex = -1;
		State stparallel = owner.ResolveState( label );

		if ( stparallel ) {
			for ( int i = 0; i < threads.Size(); i++ ) {
				if ( threads[ i ] && threads[ i ].startstate == stparallel ) {
					foundindex = i;
					break;
				}
			}
		} // of if ( stparallel ) {}

		return foundindex;
	} // of SubproclibParallelExecNode FindThreadByLabel( StateLabel label ) {}

	int FindThreadByState( State teststate ) {
		int foundindex = -1;

		for ( int i = 0; i < threads.Size(); i++ ) {
			if ( threads[ i ] && threads[ i ].IsStateDescribesThread( teststate ) ) {
				foundindex = i;
				break;
			}
		}

		return foundindex;
	} // of SubproclibParallelExecNode FindThreadByState( State teststate ) {}

	void RemoveThread( StateLabel label ) {
		int index = 0;

		if ( label != NULL )
			index = FindThreadByLabel( label );
		else
			index = FindThreadByState( owner.curstate );

		if ( index >= 0 ) {
			//console.printf( "Removing thread %i.", index );

			threads[ index ].Destroy();
			threads.Delete( index, 1 );
		}

		if ( threads.Size() == 0 )
			Destroy();
	} // of void RemoveThread( StateLabel label ) {}

	void ThreadFrozeControl( StateLabel label, bool freezethread ) {
		int index = FindThreadByLabel( label );

		if ( index >= 0 )
			threads[ index ].frozen = freezethread;
		else
			SubproclibGeneral.StateMessage( owner, GetClassName() .. "::ThreadFrozeControl()", "Cannot resolve a StateLabel" );
	}

	override void Tick() {
		if ( !owner ) {
			Destroy();
			return;
		}

		if ( globalfreeze || level.Frozen )
			return;

		for ( int i = 0; i < threads.Size(); i++ ) {
			if ( !threads[ i ] ) {
				threads.Delete( i, 1 );
				i--;
			} else {
				if ( !threads[ i ].frozen )
					threads[ i ].ParTick();
			}
		}
	} // of override void Tick() {}

	override void OnDestroy() {
		for ( int i = 0; i < threads.Size(); i++ )
			threads[ i ].Destroy();

		Super.OnDestroy();
	}

} // of class SubproclibParallelExecKeeper: Inventory {}

