version "4.3.1"

#include "ZScript/Util.zsc"
#include "ZScript/Subproc.zsc"
#include "ZScript/Parallel.zsc"

#include "Examples/ZScriptBase.zsc"

// New engines version branch (with mixins).

class SubprocActor: Actor abstract {
	Mixin Parallelizing;
	Mixin Subprocedures;
}


mixin class Parallelizing {
	action void PAR_Thread( StateLabel label, EParallelExecDirectives execparams = PARSPR_SkipTNT1 ) {
		SubproclibParallelExecKeeper.GetKeeper( invoker ).AddThread( label, execparams );
	}

	action void PAR_Stop( StateLabel label = NULL ) {
		SubproclibParallelExecKeeper.GetKeeper( invoker ).RemoveThread( label );
	}

	action void PAR_FrozeFlow( StateLabel label, bool freezethread ) {
		SubproclibParallelExecKeeper.GetKeeper( invoker ).ThreadFrozeControl( label, freezethread );
	}
} // of mixin class Parallelizing {}

mixin class Subprocedures {
	SubproclibStatesStackKeeper subprocHandler;

	void SUBP_RemoveHandler( void ) {
		if ( subprocHandler )
			subprocHandler.Destroy();
	}

	void SUBP_InitHandler( void ) {
		SUBP_RemoveHandler();
		subprocHandler = SubproclibStatesStackKeeper.Create( self );
	}

	override void PostBeginPlay() {
		SUBP_InitHandler();
	}

	action State SUBP_Call( StateLabel label ) {
		return ( invoker.subprocHandler? invoker.subprocHandler.SubprocCall( label ) : NULL );
	}

	action State SUBP_Return( void ) {
		return ( invoker.subprocHandler? invoker.subprocHandler.SubprocReturn() : NULL );
	}
} // of mixin class Subprocedures {}
